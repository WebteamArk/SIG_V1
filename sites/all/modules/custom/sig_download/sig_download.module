<?php

/**
 * @file sig_download.module
 * @author Jacek Szmit
 */
define('SIG_DOWNLOAD_COOKIE', 'sig_download_registered');
define('SIG_DOWNLOAD_EMAIL_ENTITY', 'email_collect');
define('SIG_DOWNLOAD_EMAIL_BUNDLE', 'email_collect_downloadcenter');
define('SIG_DOWNLOAD_DATE_FORMAT', 'Y-m-d');
define('SIG_DOWNLOAD_INTERVAL', 7);

/**
 * Implements hook_block_info().
 */
function sig_download_block_info() {
  $blocks = array();

  $blocks['sid_downloadcenter'] = array(
      'info' => t('SIG downloadcenter'),
      'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sig_download_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'sid_downloadcenter':
      $block['subject'] = t('Sig downloadcenter');
      if (!isset($_COOKIE[SIG_DOWNLOAD_COOKIE])) {
        $block['content'] = drupal_get_form('sig_downloadcenter_email_form');
      }
      else {
        $block['content'] = drupal_get_form('sig_downloadcenter_list_form');
      }
      break;
  }
  return $block;
}

/**
 * sig_downloadcenter_email_form CALLBACK
 */
function sig_downloadcenter_email_form($form, &$form_state) {
  $form['sig'] = array(
    '#type' => 'container',
  );
  $form['sig']['info'] = array(
    '#markup' => t('Enter Your email address to download files.'),
    '#prefix' => '<div class="sig-form-info form-item">',
    '#suffix' => '</div>',
  );
  $form['sig']['company'] = array(
    '#type' => 'textfield',
    '#required' => false,
    '#attributes' =>array('placeholder' => t('Company name'))
  );
  $form['sig']['firstname'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#attributes' =>array('placeholder' => t('Firstname*'))
  );
  $form['sig']['lastname'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#attributes' =>array('placeholder' => t('Lastname*'))
  );
  $form['sig']['profile'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => t('Profile*'),
      'architect' => t('Architect'),
      'contractor' => t('Contractor'),
      'developer' => t('Developer'),
      'engineering' => t('Engineering'),
      'installer' => t('Installer'),
      'Other' => t('Other'),
    ),
    '#default_value' => '',
    '#required' => true,
    '#attributes' =>array('placeholder' => t('Profile*')),
    '#prefix' => '<div class="select-wrapper form-item">',
    '#suffix' => '</div>',
  );
//   $form['sig']['address'] = array(
//     '#type' => 'textfield',
//     '#required' => true,
//     '#attributes' =>array('placeholder' => t('Address*'))
//   );
  $form['sig']['country'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => t('Country*'),
      'AL' => t('Albania'),
      'AD' => t('Andorra'),
      'AT' => t('Austria'),
      'BY' => t('Belarus'),
      'BE' => t('Belgium'),
      'BA' => t('Bosnia and Herzegovina'),
      'BG' => t('Bulgaria'),
      'HR' => t('Croatia'),
      'CY' => t('Cyprus'),
      'CZ' => t('Czech Republic'),
      'DK' => t('Denmark'),
      'EE' => t('Estonia'),
      'FO' => t('Faroe Islands'),
      'FI' => t('Finland'),
      'FR' => t('France'),
      'DE' => t('Germany'),
      'GI' => t('Gibraltar'),
      'GR' => t('Greece'),
      'HU' => t('Hungary'),
      'IS' => t('Iceland'),
      'IE' => t('Ireland'),
      'IM' => t('Isle of Man'),
      'IT' => t('Italy'),
      'XK' => t('Kosovo'),
      'LV' => t('Latvia'),
      'LI' => t('Liechtenstein'),
      'LT' => t('Lithuania'),
      'LU' => t('Luxembourg'),
      'MK' => t('Macedonia'),
      'MT' => t('Malta'),
      'MD' => t('Moldova'),
      'MC' => t('Monaco'),
      'ME' => t('Montenegro'),
      'NL' => t('Netherlands'),
      'NO' => t('Norway'),
      'PL' => t('Poland'),
      'PT' => t('Portugal'),
      'RO' => t('Romania'),
      'RU' => t('Russia'),
      'SM' => t('San Marino'),
      'RS' => t('Serbia'),
      'SK' => t('Slovakia'),
      'SI' => t('Slovenia'),
      'ES' => t('Spain'),
      'SE' => t('Sweden'),
      'CH' => t('Switzerland'),
      'UA' => t('Ukraine'),
      'GB' => t('United Kingdom'),
      'VA' => t('Vatican city'),
    ),
    '#default_value' => '',
    '#required' => true,
    '#attributes' =>array('placeholder' => t('Country*')),
    '#prefix' => '<div class="select-wrapper form-item">',
    '#suffix' => '</div>',
  );
//   $form['sig']['telephone'] = array(
//     '#type' => 'textfield',
//     '#required' => true,
//     '#attributes' =>array('placeholder' => t('Telephone*'))
//   );
  $form['sig']['email'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#element_validate' => array('_sig_download_email_validate'),
    '#attributes' =>array('placeholder' => t('Email*'))
  );
  $form['sig']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('> Submit'),
    '#prefix' => '<div class="form-actions"><div class="extra_div">',
    '#suffix' => '<span class="spanL"></span><span class="spanR"></span></div></div>',
  );

  return $form;
}

/**
 * email element_validate CALLBACK
 */
function _sig_download_email_validate($element, &$form_state, $form) {
  $value = $element['#value'];
  if (!valid_email_address($value)) {
    form_error($element, t('Please enter a valid email address.'));
  }
}

/**
 * sig_downloadcenter_email_form submit CALLBACK
 */
function sig_downloadcenter_email_form_submit($form, &$form_state) {
  global $cookie_domain;
  
  if (!isset($_COOKIE[SIG_DOWNLOAD_COOKIE])) {
    setcookie(SIG_DOWNLOAD_COOKIE,1,time() + (86400 * 365), '/', $cookie_domain);
  }
  $company = $form_state['values']['company'];
  $firstname = $form_state['values']['firstname'];
  $lastname = $form_state['values']['lastname'];
//   $address = $form_state['values']['address'];
  $address = '--';
  $country = $form_state['values']['country'];
//   $telephone = $form_state['values']['telephone'];
  $telephone = '--';
  $profile = $form_state['values']['profile'];
  $country = $form_state['values']['country'];
  $email = $form_state['values']['email'];
  if(_sig_download_save_email_entity($company, $firstname, $lastname, $address, $telephone, $profile, $country, $email)) {
    _sig_messages_download_mail_send($email, $lastname);
  }
}

/**
 * sig_downloadcenter_list_form CALLBACK
 */
function sig_downloadcenter_list_form($form, &$form_state) {
  $node = menu_get_object();
  
  $files_info = array();
  
  foreach ($node->field_paragraph_files[LANGUAGE_NONE] as $elem) {
    $entity = entity_load_single('paragraphs_item', $elem['value']);
    $files_info[] = array(
      'title' => $entity->field_downloadcenter_title[LANGUAGE_NONE][0]['value'],
      'desc' => $entity->field_downloadcenter_description[LANGUAGE_NONE][0]['value'],
      'file' => $entity->field_downloadcenter_file[LANGUAGE_NONE][0]['fid'],
    );
  }
  
  $form['sig'] = array(
    '#type' => 'container',
  );
  if(!empty($form_state['storage']['sig_selected_files'])) {
    $thanks = t('Thank you for your request, download will start automatically.');
    $form['sig']['thanks'] = array(
      '#markup' => '<div class="sig-thanks">'. $thanks . '</div>'
    );
    
    foreach ($form_state['storage']['sig_selected_files'] as $fid => $selected) {
      if($selected > 0) {
        $file = file_load($fid);
        $form['sig']['file_'.$fid] = array(
          '#markup' => theme('file_link', array('file' => $file)),
          '#prefix' => '<div class="sig-file-auto">',
          '#suffix' => '</div>',
        );
      }
    }
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'sig_download') . '/sig_download.js',
    );
    
    return $form;
  }
  
  if (empty($files_info)) {
    $form['sig']['info'] = array(
      '#markup' => t('No files to download.'),
      '#prefix' => '<div class="sig-form-info">',
      '#suffix' => '</div>',
    );
  } else {
    $options = array();

    foreach ($files_info as $item) {
      $options[$item['file']] = '<div class="sig-option-info"><p>' . $item['title'] . '</p>' . $item['desc'] . '</div>';
    }

    $form['sig']['files'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#required' => true,
    );
    
    $form['sig']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('> Download'),
        '#prefix' => '<div class="form-actions"><div class="extra_div">',
        '#suffix' => '<span class="spanL"></span><span class="spanR"></span></div></div>',
    );
  }

  return $form;
}

/**
 * sig_downloadcenter_list_form submit CALLBACK
 */
function sig_downloadcenter_list_form_submit($form, &$form_state) {
  $form_state['storage']['sig_selected_files'] = $form_state['values']['files'];
  $form_state["rebuild"] = true;
}

/**
 * Save email entity if not exist.
 * @param string $email
 * @return boolean
 */
function _sig_download_save_email_entity($company, $firstname, $lastname, $address, $telephone, $profile, $country, $email) {
  if(_sig_download_check_email_entity_exists($email)) {
    return false;
  }
  
  $date = new DateTime(date(SIG_DOWNLOAD_DATE_FORMAT));
  
  $email_collect_values = array(
    'type' => SIG_DOWNLOAD_EMAIL_BUNDLE,
    'title' => $email . ' ' . $company,
    'field_ecd_company_name' => array(LANGUAGE_NONE => array(0 => array('value' => $company))),
    'field_ecd_firstname' => array(LANGUAGE_NONE => array(0 => array('value' => $firstname))),
    'field_ecd_lastname' => array(LANGUAGE_NONE => array(0 => array('value' => $lastname))),
    'field_ecd_address' => array(LANGUAGE_NONE => array(0 => array('value' => $address))),
    'field_ecd_telephone' => array(LANGUAGE_NONE => array(0 => array('value' => $telephone))),
    'field_ecd_profile' => array(LANGUAGE_NONE => array(0 => array('value' => $profile))),
    'field_ecd_country' => array(LANGUAGE_NONE => array(0 => array('value' => $country))),
    'field_ecd_email' => array(LANGUAGE_NONE => array(0 => array('value' => $email))),
    'field_ecd_date' => array(LANGUAGE_NONE => array(0 => array('value' => $date->format(SIG_DOWNLOAD_DATE_FORMAT)))),
    'field_ecd_sent' => array(LANGUAGE_NONE => array(0 => array('value' => 0))),
  );

  $email_collect = entity_create(SIG_DOWNLOAD_EMAIL_ENTITY, $email_collect_values);
  $email_collect->save();

  return true;
}

/**
 * Check if email exists already.
 * @param string $email
 * @return boolean
 */
function _sig_download_check_email_entity_exists($email) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', SIG_DOWNLOAD_EMAIL_ENTITY)
  ->propertyCondition('type', SIG_DOWNLOAD_EMAIL_BUNDLE)
  ->fieldCondition('field_ecd_email', 'value', $email, '=')
  ->range(0,1)
  ->execute();

  return (!empty($entities[SIG_DOWNLOAD_EMAIL_ENTITY])) ? true : false;
}

/**
 * Implements hook_cron().
 */
function sig_download_cron() {
  $recipients = _sig_download_get_recipients();
  
  foreach ($recipients as $recipient) {
    _sig_messages_download_after_mail_send($recipient['email'], $recipient['surname']);
    _sig_download_mark_as_sent($recipient['id']);
  }
}

/**
 * Helper function to get emails that should be sent.
 * 
 * @return array
 */
function _sig_download_get_recipients() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', SIG_DOWNLOAD_EMAIL_ENTITY)
  ->propertyCondition('type', SIG_DOWNLOAD_EMAIL_BUNDLE)
  ->fieldCondition('field_ecd_sent', 'value', 0, '=')
  ->execute();
  
  $result = array();
  
  if(!empty($entities[SIG_DOWNLOAD_EMAIL_ENTITY])) {
    $now = new DateTime(date(SIG_DOWNLOAD_DATE_FORMAT));
    foreach ($entities[SIG_DOWNLOAD_EMAIL_ENTITY] as $id => $object) {
      $entity = entity_load_single(SIG_DOWNLOAD_EMAIL_ENTITY, $id);
      $date = DateTime::createFromFormat(SIG_DOWNLOAD_DATE_FORMAT, $entity->field_ecd_date[LANGUAGE_NONE][0]['value']);
      $date->modify('+' . SIG_DOWNLOAD_INTERVAL . ' days');
      if ($date <= $now) {
        $result[] = array(
          'id' => $id,
          'email' => $entity->field_ecd_email[LANGUAGE_NONE][0]['value'],
          'surname' => $entity->field_ecd_lastname[LANGUAGE_NONE][0]['value'],
        );
      }
    }
  }
  
  return $result;
}

/**
 * Helper function to mark entity as sent
 * 
 * @param int $id
 */
function _sig_download_mark_as_sent($id) {
  $entity = entity_load_single(SIG_DOWNLOAD_EMAIL_ENTITY, $id);
  $entity->field_ecd_sent = array(LANGUAGE_NONE => array(0 => array('value' => 1)));
  $entity->save();
}

/**
 * Implements hook_webform_submission_presave().
 */
function sig_download_webform_submission_presave($node, &$submission) {
  $email = $submission->data[8][0];
  $surname = $submission->data[3][0];
  //drupal_set_message(var_export($submission->data, true));
  _sig_messages_ask_us_mail_send($email, $surname);
}